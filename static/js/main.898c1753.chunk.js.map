{"version":3,"sources":["pkce.ts","icons.ts","components/data/BlindTestData.ts","components/data/SettingsData.ts","helpers.ts","services/axios.ts","components/Login.tsx","services/SpotifyAPI.ts","components/Settings.tsx","components/data/PlaylistsData.ts","components/data/TracksBaseData.ts","components/PlaylistRow.tsx","components/Paginator.tsx","components/PlaylistTable.tsx","components/PlaylistsButton.tsx","components/LogoutButton.tsx","components/SettingsButton.tsx","components/BlindTestView.tsx","components/LoginCallback.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PKCECodePair","cv","cc","codeVerifier","codeChallenge","this","base64URLEncode","str","toString","replace","createPKCECodes","buffer","randomBytes","Buffer","from","createHash","update","digest","library","add","fab","faEye","faComment","faMinus","faPlus","faQuestion","faVolumeMute","faCheck","faList","faStepForward","faPause","faPlay","faMusic","faPlayCircle","faCog","faSearch","faTimes","faSignOutAlt","faCheckCircle","faTimesCircle","Guessable","original","toGuess","maxDistance","BlindTestTrack","title","artists","uri","offset","img","BlindTestTracks","spotTracks","tracks","doneTracks","t","track","map","a","name","cleanSpoiler","push","computeGuessable","album","track_number","images","url","value","cleaned","cleanValue","maxDist","getMaxDist","SettingsData","twitchChannel","deviceId","addEveryUser","chatNotifications","undefined","getAppHomeURL","URL","window","location","href","origin","process","getParam","results","RegExp","exec","decodeURIComponent","getTwitchOAuthToken","localStorage","getItem","getRefreshToken","setRefreshToken","refresh_token","setItem","setAccessToken","access_token","removeAccessToken","removeItem","getSettings","deserialize","getBlindTestScores","Map","Object","entries","JSON","parse","removeBlindTestScores","removeBlindTestTracks","setBlindTestTracks","data","serialize","cleanValueLight","replaceAll","trim","toLowerCase","normalize","artist","regExp","Math","floor","max","length","computeDistance","source","target","sourceLength","targetLength","dist","Array","i","fill","j","cost","charAt","min","instance","axios","create","headers","axiosErrorCallback","interceptors","response","use","res","err","config","status","_retry","defaults","common","Authorization","params","URLSearchParams","append","post","rs","accessToken","displayError","Promise","reject","stringify","retrieveAccessToken","access_code","pkcePair","codePair","consumePkcePair","Login","setSubtitle","useContext","BlindTestContext","useEffect","Button","id","type","variant","size","onClick","computePkcePair","icon","getPlaylists","limit","get","getPlaylistTracks","playlist_id","setRepeatMode","enabled","device_id","put","Settings","setConfigured","navigate","useNavigate","useState","settings","validated","setValidated","initialized","setInitialized","devices","setDevices","selectedDevice","setSelectedDevice","loggedInTwitch","setLoggedInTwitch","setChatNotifications","setAddEveryUser","channel","setChannel","twitchLoginURI","twitch_oauth_token","token","hash","then","found","find","d","style","width","margin","Form","noValidate","onSubmit","e","preventDefault","stopPropagation","currentTarget","checkValidity","Group","className","controlId","Label","Control","required","onChange","placeholder","Select","Check","disabled","checked","label","Text","muted","PlaylistsData","PLAYLIST_LIMIT","SEARCH_LIMIT","dataInitialized","loadSlice","start","end","slice","query","loadAll","filter","p","includes","loadedData","playlistsResponse","playlistsData","total","splice","items","TracksBaseData","playlist","playlistItems","getPlaylistItems","PlaylistRow","props","setOngoingBt","confirmationDisplayed","setConfirmationDisplayed","selectPlaylist","loadPlaylist","keepScores","bt","renderTickCross","condition","color","MusicIcon","colSpan","public","Alert","owner","display_name","Paginator","currentPage","onPageChanged","ceil","totalRecords","pageLimit","PlaylistTable","PAGE_SIZE","searchSubmitted","setSearchSubmitted","setQuery","playlists","setPlaylists","playlistCount","setPlaylistCount","setCurrentPage","loadCurrentPlaylistPage","playlistSearch","playlistSearchCancel","search","count","handlePageChanged","page","InputGroup","FormControl","role","onKeyDown","event","key","PlaylistsButton","LogoutButton","setLoggedIn","twitchClient","twitchCallback","BlindTestView","setDoneTracks","scores","setScores","nickFilter","setNickFilter","loading","setLoading","playing","setPlaying","paused","setPaused","guesses","setGuesses","guessables","setGuessables","coverUri","setCoverUri","chan","opts","channels","identity","username","password","Client","connect","on","_channel","_tags","_message","twitchConnection","disconnect","backupState","setBlindTestScores","nick","message","addPlayerIfUnknown","proposition","guessed","guessable","points","g","guessedBy","addPointToPlayer","updateGuessState","say","newScores","set","index","newGuesses","forEach","oldGuess","allGuessed","reduce","prev","curr","handleNextSong","album_uri","context_uri","position","catch","CrossEmoji","BubbleEmoji","CheckEmoji","GuessableView","guess","fontWeight","src","alt","display","flat","distinctScores","_val","_key","score","sort","b","localeCompare","s","rank","indexOf","computeFlatScores","sc","LoginCallback","code","App","loggedIn","isInitialized","configured","ongoingBt","view","setView","subtitle","errorMessage","setErrorMessage","contextValue","msg","Provider","Heading","right","SettingsButton","path","element","createContext","v","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","shim","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.898c1753.chunk.js","sourcesContent":["import { randomBytes, createHash } from 'crypto'\r\n\r\nexport class PKCECodePair {\r\n    codeVerifier: string\r\n    codeChallenge: string\r\n\r\n    constructor(cv: string, cc: string) {\r\n        this.codeVerifier = cv\r\n        this.codeChallenge = cc\r\n    }\r\n}\r\n\r\nexport const base64URLEncode = (str: Buffer): string => {\r\n    return str\r\n        .toString('base64')\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_')\r\n        .replace(/=/g, '')\r\n}\r\n\r\nexport const sha256 = (buffer: Buffer): Buffer => {\r\n    return createHash('sha256').update(buffer).digest()\r\n}\r\n\r\nexport const createPKCECodes = (): PKCECodePair => {\r\n    const codeVerifier = base64URLEncode(randomBytes(64))\r\n    const codeChallenge = base64URLEncode(sha256(Buffer.from(codeVerifier)))\r\n    const codePair = new PKCECodePair(codeVerifier, codeChallenge)\r\n    return codePair\r\n}","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faComment, faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport { faVolumeMute, faQuestion, faCheck, faMinus, faEye, faPlus, faMusic, faPlayCircle, faList, faStepForward, faPause, faPlay, faCog, faSearch, faTimes, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(\r\n  fab,\r\n  faEye,\r\n  faComment,\r\n  faMinus,\r\n  faPlus,\r\n  faQuestion,\r\n  faVolumeMute,\r\n  faCheck,\r\n  faList,\r\n  faStepForward,\r\n  faPause,\r\n  faPlay,\r\n  faMusic,\r\n  faPlayCircle,\r\n  faStepForward,\r\n  faCog,\r\n  faSearch,\r\n  faTimes,\r\n  faSignOutAlt,\r\n  faCheckCircle,\r\n  faTimesCircle\r\n)\r\n","import { cleanValue, cleanSpoiler, getMaxDist } from \"../../helpers\"\r\n\r\nexport class Guessable {\r\n    original: string\r\n    toGuess: string\r\n    maxDistance: number\r\n\r\n    constructor(original: string, toGuess: string, maxDistance: number) {\r\n        this.original = original;\r\n        this.toGuess = toGuess;\r\n        this.maxDistance = maxDistance;\r\n    }\r\n}\r\n\r\nexport class BlindTestTrack {\r\n    title: Guessable\r\n    artists: Guessable[]\r\n    uri: string\r\n    img: string\r\n    offset: number\r\n\r\n    constructor(title: Guessable, artists: Guessable[], uri: string, offset: number, img: string) {\r\n        this.title = title;\r\n        this.artists = artists;\r\n        this.uri = uri;\r\n        this.offset = offset;\r\n        this.img = img;\r\n    }\r\n}\r\n\r\nexport class BlindTestTracks {\r\n    tracks: BlindTestTrack[] = []\r\n    doneTracks: number = 0\r\n\r\n    constructor(spotTracks: any[]) {\r\n        if (spotTracks) {\r\n            for (let spotTrack of spotTracks) {\r\n                let t = spotTrack.track;\r\n                let artists = t.artists.map((a: any) => a.name);\r\n                let title = cleanSpoiler(t.name, artists);\r\n                this.tracks.push(new BlindTestTrack(\r\n                    computeGuessable(title),\r\n                    t.artists.map((a: { name: string }) => computeGuessable(a.name)),\r\n                    t.album.uri,\r\n                    t.track_number - 1,\r\n                    t.album.images[1].url\r\n                ));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst computeGuessable = (value: string) => {\r\n    let cleaned = cleanValue(value);\r\n    let maxDist = getMaxDist(cleaned);\r\n    return new Guessable(value, cleaned, maxDist);\r\n}\r\n","export class SettingsData {\r\n    twitchChannel: string\r\n    deviceId: string\r\n    addEveryUser: boolean\r\n    chatNotifications: boolean\r\n\r\n    constructor(twitchChannel: string, deviceId: string, addEveryUser: boolean, chatNotifications: boolean) {\r\n        this.twitchChannel = twitchChannel\r\n        this.deviceId = deviceId\r\n        this.addEveryUser = addEveryUser\r\n        this.chatNotifications = chatNotifications\r\n    }\r\n\r\n    isInitialized(): boolean {\r\n        return this.twitchChannel !== undefined && this.deviceId !== undefined;\r\n    }\r\n}\r\n","import { BlindTestTracks } from \"components/data/BlindTestData\"\r\nimport { deserialize, serialize } from 'class-transformer'\r\nimport { createPKCECodes, PKCECodePair } from 'pkce'\r\nimport { SettingsData } from \"components/data/SettingsData\"\r\n\r\nexport const getAppHomeURL = () => {\r\n  return new URL(window.location.href).origin + process.env.PUBLIC_URL;\r\n}\r\n\r\nexport const getQueryParam = (name: string) => {\r\n  return getParam(name, window.location.search);\r\n}\r\n\r\nexport const getHashParam = (name: string) => {\r\n  return getParam(name, window.location.hash);\r\n}\r\n\r\nconst getParam = (name: string, value: string) => {\r\n  name = name.replace(/[[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\")\r\n  var regex = new RegExp(\"[\\\\?&#]\" + name + \"=([^&#]*)\"),\r\n    results = regex.exec(value)\r\n  return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"))\r\n}\r\n\r\nexport const computePkcePair = () => {\r\n  const codePair: PKCECodePair = createPKCECodes()\r\n  localStorage.setItem(\"pkce_pair\", serialize(codePair))\r\n  return codePair\r\n}\r\n\r\nexport const consumePkcePair = () => {\r\n  const codePair: PKCECodePair = deserialize(PKCECodePair, localStorage.getItem(\"pkce_pair\") || \"{}\")\r\n  localStorage.removeItem(\"pkce_pair\")\r\n  return codePair\r\n}\r\n\r\nexport const getTwitchOAuthToken = () => {\r\n  return localStorage.getItem(\"twitch_oauth_token\");\r\n}\r\n\r\nexport const setTwitchOAuthToken = (twitch_oauth_token: any) => {\r\n  localStorage.setItem(\"twitch_oauth_token\", twitch_oauth_token)\r\n}\r\n\r\nexport const removeTwitchOAuthToken = () => {\r\n  localStorage.removeItem(\"twitch_oauth_token\")\r\n}\r\n\r\nexport const getRefreshToken = () => {\r\n  return localStorage.getItem(\"refresh_token\")\r\n}\r\n\r\nexport const setRefreshToken = (refresh_token: any) => {\r\n  localStorage.setItem(\"refresh_token\", refresh_token)\r\n}\r\n\r\nexport const removeRefreshToken = () => {\r\n  localStorage.removeItem(\"refresh_token\")\r\n}\r\n\r\nexport const getAccessToken = () => {\r\n  return localStorage.getItem(\"access_token\")\r\n}\r\n\r\nexport const setAccessToken = (access_token: any) => {\r\n  localStorage.setItem(\"access_token\", access_token)\r\n}\r\n\r\nexport const removeAccessToken = () => {\r\n  localStorage.removeItem(\"access_token\")\r\n}\r\n\r\nexport const hasStoredBlindTest = () => {\r\n  return localStorage.getItem(\"blind_test_tracks\") !== null\r\n}\r\n\r\nexport const getSettings = () => {\r\n  return deserialize(SettingsData, localStorage.getItem(\"settings\") || \"{}\")\r\n}\r\n\r\nexport const removeSettings = () => {\r\n  localStorage.removeItem(\"settings\")\r\n}\r\n\r\nexport const setSettings = (data: SettingsData) => {\r\n  localStorage.setItem(\"settings\", serialize(data))\r\n}\r\n\r\nexport const getBlindTestScores = () => {\r\n  // ugly workaround because class-transformer deserialize maps to plain objects ...\r\n  let scores: Map<string, number> = new Map(Object.entries(JSON.parse(localStorage.getItem(\"blind_test_scores\") || \"{}\")));\r\n  return scores;\r\n}\r\n\r\nexport const removeBlindTestScores = () => {\r\n  localStorage.removeItem(\"blind_test_scores\")\r\n}\r\n\r\nexport const setBlindTestScores = (scores: Map<string, number>) => {\r\n  localStorage.setItem(\"blind_test_scores\", serialize(scores));\r\n}\r\n\r\nexport const getBlindTestTracks = () => {\r\n  let bt = deserialize(BlindTestTracks, localStorage.getItem(\"blind_test_tracks\") || \"{}\")\r\n  return bt\r\n}\r\n\r\nexport const removeBlindTestTracks = () => {\r\n  localStorage.removeItem(\"blind_test_tracks\")\r\n}\r\n\r\nexport const setBlindTestTracks = (data: BlindTestTracks) => {\r\n  localStorage.setItem(\"blind_test_tracks\", serialize(data))\r\n}\r\n\r\n// light clean + trailing parts (- X || (X))\r\nexport const cleanValue = (value: string) => {\r\n  return cleanValueLight(value).replaceAll(/ \\(.+\\).*| -.+/g, \"\").trim()\r\n}\r\n\r\n// lower-case + remove diacritic + remove some special characters\r\nexport const cleanValueLight = (value: string) => {\r\n  return value.toLowerCase().normalize(\"NFD\").replaceAll(/\\p{Diacritic}/gu, \"\").replaceAll(/[,!?:;.]/g, \"\").replaceAll(\"’\", \"'\").trim()\r\n}\r\n\r\nexport const cleanSpoiler = (title: string, artists: string[]) => {\r\n  let cleaned = title;\r\n  for (let artist of artists) {\r\n    var regExp = new RegExp(` \\\\(.*${artist}.*\\\\)| \\\\[.*${artist}.*\\\\]| - .*${artist}.*`, \"gi\");\r\n    cleaned = cleaned.replaceAll(regExp, \"\").trim();\r\n  }\r\n  return cleaned;\r\n}\r\n\r\nexport const getMaxDist = (value: string) => {\r\n  return Math.floor(Math.max(0, value.length - 3) / 6);\r\n}\r\n\r\nexport const computeDistance = (source: string, target: string) => {\r\n  const sourceLength: number = source.length\r\n  const targetLength: number = target.length\r\n  if (sourceLength === 0) return targetLength\r\n  if (targetLength === 0) return sourceLength\r\n\r\n  const dist = new Array<number[]>(sourceLength + 1)\r\n  for (let i = 0; i <= sourceLength; ++i) {\r\n    dist[i] = new Array<number>(targetLength + 1).fill(0)\r\n  }\r\n\r\n  for (let i = 0; i < sourceLength + 1; i++) {\r\n    dist[i][0] = i\r\n  }\r\n  for (let j = 0; j < targetLength + 1; j++) {\r\n    dist[0][j] = j\r\n  }\r\n  for (let i = 1; i < sourceLength + 1; i++) {\r\n    for (let j = 1; j < targetLength + 1; j++) {\r\n      let cost = source.charAt(i - 1) === target.charAt(j - 1) ? 0 : 1\r\n\r\n      // special cases\r\n      if (source.charAt(i - 1) === ' ' && (target.charAt(j - 1) === '-' || target.charAt(j - 1) === '\\'')) cost = 0\r\n\r\n      dist[i][j] = Math.min(dist[i - 1][j] + 1, dist[i][j - 1] + 1, dist[i - 1][j - 1] + cost)\r\n      if (i > 1 &&\r\n        j > 1 &&\r\n        source.charAt(i - 1) === target.charAt(j - 2) &&\r\n        source.charAt(i - 2) === target.charAt(j - 1)) {\r\n        dist[i][j] = Math.min(dist[i][j], dist[i - 2][j - 2] + cost)\r\n      }\r\n    }\r\n  }\r\n  return dist[sourceLength][targetLength]\r\n}","import axios from 'axios';\r\nimport { getRefreshToken, setRefreshToken, removeAccessToken, getAccessToken, setAccessToken, consumePkcePair, getAppHomeURL } from 'helpers';\r\n\r\nconst instance = axios.create({\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n});\r\n\r\nlet axiosErrorCallback: (msg: string) => void = () => { };\r\n\r\nexport const setAxiosErrorCallback = (callback: (msg: string) => void) => {\r\n    axiosErrorCallback = callback;\r\n}\r\n\r\ninstance.interceptors.response.use(\r\n    (res) => {\r\n        return res\r\n    },\r\n    async (err) => {\r\n        const config = err.config\r\n\r\n        if (err.response) {\r\n            // Access Token was expired\r\n            if (err.response.status === 401 && !config._retry) {\r\n                delete instance.defaults.headers.common.Authorization\r\n                removeAccessToken()\r\n                config._retry = true\r\n                try {\r\n                    const params = new URLSearchParams()\r\n                    params.append('grant_type', 'refresh_token')\r\n                    params.append('refresh_token', getRefreshToken() || \"\")\r\n                    params.append('client_id', process.env.REACT_APP_SPOTIFY_CLIENT_ID || \"\")\r\n                    const rs = await instance.post('https://accounts.spotify.com/api/token',\r\n                        params, {\r\n                        headers: {\r\n                            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                        }\r\n                    })\r\n                    setRefreshToken(rs.data.refresh_token)\r\n                    const accessToken = rs.data.access_token\r\n                    setAccessToken(accessToken)\r\n                    instance.defaults.headers.common.Authorization = `Bearer ${accessToken}`\r\n                    config.headers.Authorization = `Bearer ${accessToken}`\r\n                    return instance(config)\r\n                } catch (_error) {\r\n                    displayError(err);\r\n                    return Promise.reject(_error)\r\n                }\r\n            }\r\n            displayError(err);\r\n        }\r\n        return Promise.reject(err);\r\n    }\r\n)\r\n\r\nconst displayError = (err: any) => {\r\n    axiosErrorCallback(err.response.status + (err.response.data && (' ' + JSON.stringify(err.response.data))));\r\n}\r\n\r\nexport const retrieveAccessToken = (access_code: string) => {\r\n    const params = new URLSearchParams()\r\n    const pkcePair = consumePkcePair()\r\n    params.append('code', access_code)\r\n    params.append('redirect_uri', getAppHomeURL() + \"/callback\")\r\n    params.append('grant_type', 'authorization_code')\r\n    params.append('code_verifier', pkcePair.codeVerifier)\r\n    params.append('client_id', process.env.REACT_APP_SPOTIFY_CLIENT_ID || \"\")\r\n\r\n    return instance.post('https://accounts.spotify.com/api/token',\r\n        params, {\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }\r\n    })\r\n}\r\n\r\nconst accessToken = getAccessToken()\r\nif (accessToken) {\r\n    instance.defaults.headers.common.Authorization = `Bearer ${accessToken}`\r\n}\r\n\r\nexport default instance;","import { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { computePkcePair, getAppHomeURL } from \"../helpers\"\r\nimport { useContext, useEffect } from \"react\";\r\nimport { BlindTestContext } from \"App\";\r\n\r\nconst Login = () => {\r\n\r\n  const { setSubtitle } = useContext(BlindTestContext);\r\n\r\n  useEffect(() => {\r\n    setSubtitle('Play Blind-Test on Twitch !');\r\n  }, [setSubtitle]);\r\n\r\n  const authorize = () => {\r\n    const pkcePair = computePkcePair()\r\n    window.location.href = \"https://accounts.spotify.com/authorize\" +\r\n      \"?client_id=\" + process.env.REACT_APP_SPOTIFY_CLIENT_ID +\r\n      \"&redirect_uri=\" + getAppHomeURL() + \"/callback\" +\r\n      \"&scope=playlist-read-private%20user-modify-playback-state%20user-read-playback-state\" +\r\n      \"&response_type=code\" +\r\n      \"&code_challenge_method=S256\" +\r\n      \"&code_challenge=\" + pkcePair.codeChallenge +\r\n      \"&show_dialog=true\";\r\n  }\r\n\r\n  return (\r\n    <Button id=\"loginButton\" type=\"submit\" variant=\"outline-secondary\" size=\"lg\" onClick={authorize}>\r\n      <FontAwesomeIcon icon={['far', 'check-circle']} size=\"sm\" /> Login with Spotify\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import instance from \"./axios\";\r\n\r\nexport const getPlaylists = (offset: number, limit: number) => {\r\n    return instance.get(`https://api.spotify.com/v1/me/playlists?offset=${offset}&limit=${limit}`)\r\n}\r\n\r\nexport const getPlaylistTracks = (playlist_id: string, offset: number, limit: number) => {\r\n    return instance.get(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks?offset=${offset}&limit=${limit}&fields=items(track(track_number,name,artists(name),album(uri,images)))`)\r\n}\r\n\r\nexport const setRepeatMode = (enabled: boolean, device_id: string) => {\r\n    return instance.put(`https://api.spotify.com/v1/me/player/repeat?device_id=${device_id}&state=${enabled ? 'track' : 'off'}`)\r\n}\r\n\r\nexport const launchTrack = (album_uri: string, offset: number, device_id: string) => {\r\n    return instance.put(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\r\n        context_uri: album_uri,\r\n        offset: {\r\n            position: offset\r\n        }\r\n    })\r\n}\r\n\r\nexport const getDevices = () => {\r\n    return instance.get(`https://api.spotify.com/v1/me/player/devices`)\r\n}\r\n\r\nexport const pausePlayer = (device_id: string) => {\r\n    return instance.put(`https://api.spotify.com/v1/me/player/pause?device_id=${device_id}`)\r\n}\r\n\r\nexport const resumePlayer = (device_id: string) => {\r\n    return instance.put(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`)\r\n}","import { getSettings, getTwitchOAuthToken, setSettings, getAppHomeURL, setTwitchOAuthToken, getHashParam, removeTwitchOAuthToken } from \"helpers\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { getDevices } from \"services/SpotifyAPI\"\r\nimport { SettingsData } from \"./data/SettingsData\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport { Button } from \"react-bootstrap\";\r\nimport { BlindTestContext } from \"App\";\r\n\r\nconst Settings = () => {\r\n\r\n  const { setConfigured, setSubtitle } = useContext(BlindTestContext);\r\n  const navigate = useNavigate();\r\n\r\n  const [settings] = useState(() => getSettings());\r\n  const [validated, setValidated] = useState(false);\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [devices, setDevices] = useState<any[]>([]);\r\n  const [selectedDevice, setSelectedDevice] = useState<string>('');\r\n  const [loggedInTwitch, setLoggedInTwitch] = useState<boolean>(() => getTwitchOAuthToken() !== null);\r\n  const [chatNotifications, setChatNotifications] = useState<boolean>(settings.chatNotifications || false);\r\n  const [addEveryUser, setAddEveryUser] = useState<boolean>(settings.addEveryUser || false);\r\n  const [channel, setChannel] = useState(settings.twitchChannel || '');\r\n\r\n  const twitchLoginURI = \"https://id.twitch.tv/oauth2/authorize\" +\r\n    \"?client_id=\" + process.env.REACT_APP_TWITCH_CLIENT_ID +\r\n    \"&redirect_uri=\" + getAppHomeURL() + \"/settings\" +\r\n    \"&scope=chat:read+chat:edit\" +\r\n    \"&response_type=token\";\r\n\r\n  useEffect(() => {\r\n    // Twitch logging callback\r\n    const token = getHashParam('access_token')\r\n    if (token) {\r\n      setTwitchOAuthToken(token);\r\n      setLoggedInTwitch(true);\r\n      navigate(\"/settings\");\r\n    }\r\n\r\n    setSubtitle('Settings');\r\n    getDevices().then(response => {\r\n      setDevices(response.data.devices);\r\n      const found = response.data.devices.find((d: any) => d.id === settings.deviceId)\r\n      if (found) {\r\n        setSelectedDevice(found.id)\r\n      }\r\n      setInitialized(true);\r\n    })\r\n  }, []);\r\n\r\n  const twitchLogout = () => {\r\n    removeTwitchOAuthToken();\r\n    setLoggedInTwitch(false);\r\n  }\r\n\r\n  const submit = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.currentTarget.checkValidity() === true) {\r\n      setSettings(new SettingsData(channel, selectedDevice, addEveryUser, chatNotifications));\r\n      setConfigured(true);\r\n      navigate(\"/\");\r\n    }\r\n    setValidated(true);\r\n  }\r\n\r\n  if (initialized) {\r\n    return (\r\n      <div style={{ width: '600px', margin: 'auto' }}>\r\n        <Form noValidate validated={validated} onSubmit={submit}>\r\n          <Form.Group className=\"mb-3\" controlId=\"formGroupTwitch\">\r\n            <Form.Label>Twitch channel</Form.Label>\r\n            <Form.Control required value={channel} onChange={(e) => { setChannel(e.target.value) }} type=\"text\" placeholder=\"Enter twitch channel\" />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formGroupDevice\">\r\n            <Form.Label>Playing device</Form.Label>\r\n            <Form.Select required className=\"form-control\" value={selectedDevice} onChange={(e) => { setSelectedDevice(e.target.value) }}>\r\n              <option value=\"\">Select device...</option>\r\n              {devices.map((d) => <option key={d.id} value={d.id}>{d.name} ({d.type})</option>)}\r\n            </Form.Select>\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formGroupChatNotifications\">\r\n            <Form.Check disabled={!loggedInTwitch} type=\"checkbox\" checked={loggedInTwitch && chatNotifications} label=\"Display guess notifications in the chat\" onChange={(e) => { setChatNotifications(e.target.checked) }} />\r\n            {process.env.REACT_APP_TWITCH_CLIENT_ID &&\r\n              <>\r\n                {!loggedInTwitch &&\r\n                  <Form.Text id=\"twitchLoginBlock\" muted>\r\n                    You need to log in to twitch to use that feature. <a href={twitchLoginURI}>Click here to log in</a>\r\n                  </Form.Text>\r\n                }\r\n                {loggedInTwitch &&\r\n                  <Form.Text id=\"twitchLogoutBlock\" onClick={twitchLogout} muted>\r\n                    <a href=\"#\">Log out from twitch</a>\r\n                  </Form.Text>\r\n                }\r\n              </>\r\n            }\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formGroupAddEveryUser\">\r\n            <Form.Check type=\"checkbox\" checked={addEveryUser} label=\"Add every speaking viewer in the leaderboard\" onChange={(e) => { setAddEveryUser(e.target.checked) }} />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div className=\"spinner\"></div>\r\n  }\r\n}\r\n\r\nexport default Settings\r\n","import { getPlaylists } from \"services/SpotifyAPI\"\r\n\r\n// Handles cached loading of all or subsets of playlist data\r\nclass PlaylistsData {\r\n  PLAYLIST_LIMIT = 50\r\n  SEARCH_LIMIT = 20\r\n\r\n  data: any[]\r\n  dataInitialized = false\r\n\r\n  constructor() {\r\n    this.data = []\r\n  }\r\n\r\n  async total() {\r\n    if (!this.dataInitialized) {\r\n      await this.loadSlice()\r\n    }\r\n\r\n    return this.data.length\r\n  }\r\n\r\n  async slice(start: number, end: number) {\r\n    await this.loadSlice(start, end)\r\n    return this.data.slice(start, end)\r\n  }\r\n\r\n  async search(query: string) {\r\n    await this.loadAll()\r\n    // Case-insensitive search in playlist name\r\n    return this.data\r\n      .filter(p => p.name.toLowerCase().includes(query.toLowerCase()))\r\n      .slice(0, this.SEARCH_LIMIT)\r\n  }\r\n\r\n  async loadAll() {\r\n    await this.loadSlice()\r\n\r\n    // Get the rest of them if necessary\r\n    for (var offset = this.PLAYLIST_LIMIT; offset < this.data.length; offset = offset + this.PLAYLIST_LIMIT) {\r\n      await this.loadSlice(offset, offset + this.PLAYLIST_LIMIT)\r\n    }\r\n  }\r\n\r\n  async loadSlice(start = 0, end = start + this.PLAYLIST_LIMIT) {\r\n    if (this.dataInitialized) {\r\n      const loadedData = this.data.slice(start, end)\r\n\r\n      if (loadedData.filter(i => !i).length === 0) {\r\n        return loadedData\r\n      }\r\n    }\r\n\r\n    const playlistsResponse = await getPlaylists(start, this.PLAYLIST_LIMIT)\r\n    if (playlistsResponse.status !== 200) return;\r\n    const playlistsData = playlistsResponse.data\r\n\r\n    if (!this.dataInitialized) {\r\n      this.data = Array(playlistsData.total).fill(null)\r\n      this.dataInitialized = true\r\n    }\r\n\r\n    this.data.splice(start, playlistsData.items.length, ...playlistsData.items)\r\n  }\r\n}\r\n\r\nexport default PlaylistsData\r\n","import { getPlaylistTracks } from \"services/SpotifyAPI\"\r\n\r\nclass TracksBaseData {\r\n  playlist: any\r\n\r\n  constructor(playlist: any) {\r\n    this.playlist = playlist\r\n  }\r\n\r\n  async trackItems() {\r\n    await this.getPlaylistItems()\r\n    return this.playlistItems\r\n  }\r\n\r\n  // Memoization supporting multiple calls\r\n  playlistItems: any[] = []\r\n  async getPlaylistItems() {\r\n    if (this.playlistItems.length === 0) {\r\n      var limit = 100\r\n      for (var offset = 0; offset < this.playlist.tracks.total; offset = offset + limit) {\r\n        const tracks = await getPlaylistTracks(this.playlist.id, offset, limit)\r\n        if (tracks) this.playlistItems.push(...tracks.data.items.filter((i: any) => i.track))\r\n      }\r\n    }\r\n\r\n    return this.playlistItems\r\n  }\r\n}\r\n\r\nexport default TracksBaseData\r\n","import TracksBaseData from \"./data/TracksBaseData\"\r\nimport { Button, Alert } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { BlindTestTracks } from \"./data/BlindTestData\"\r\nimport { setBlindTestTracks, removeBlindTestScores, getBlindTestScores } from \"../helpers\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useContext, useState } from \"react\"\r\nimport { BlindTestContext } from \"App\"\r\n\r\nconst PlaylistRow = (props: any) => {\r\n\r\n  const { setOngoingBt } = useContext(BlindTestContext);\r\n  const [confirmationDisplayed, setConfirmationDisplayed] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const selectPlaylist = async () => {\r\n    if (getBlindTestScores().size > 0) {\r\n      setConfirmationDisplayed(true);\r\n    } else {\r\n      loadPlaylist(false);\r\n    }\r\n  }\r\n\r\n  const loadPlaylist = async (keepScores: boolean) => {\r\n    if (!keepScores) {\r\n      removeBlindTestScores();\r\n    }\r\n    const tracks = await new TracksBaseData(props.playlist).getPlaylistItems();\r\n    const bt = new BlindTestTracks(tracks);\r\n    setBlindTestTracks(bt);\r\n    setOngoingBt(true);\r\n    navigate(\"/\");\r\n  }\r\n\r\n  const renderTickCross = (condition: boolean) => {\r\n    if (condition) {\r\n      return <FontAwesomeIcon icon={['far', 'check-circle']} size=\"sm\" />\r\n    } else {\r\n      return <FontAwesomeIcon icon={['far', 'times-circle']} size=\"sm\" style={{ color: '#ECEBE8' }} />\r\n    }\r\n  };\r\n\r\n  const MusicIcon = <FontAwesomeIcon icon={['fas', 'music']} />;\r\n\r\n  let playlist = props.playlist;\r\n\r\n  if (playlist.uri == null) return (\r\n    <tr key={playlist.name}>\r\n      <td>{MusicIcon}</td>\r\n      <td>{playlist.name}</td>\r\n      <td colSpan={2}>This playlist is not supported</td>\r\n      <td>{renderTickCross(playlist.public)}</td>\r\n      <td>&nbsp;</td>\r\n    </tr>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {confirmationDisplayed &&\r\n        <div className=\"spot-modal-bg\">\r\n          <Alert className=\"spot-modal\" variant=\"secondary\" >\r\n            <p>\r\n              Do you want to reset the leaderboard scores ?\r\n            </p>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <Button className=\"mr-2\" onClick={() => loadPlaylist(false)} >\r\n                Yes\r\n              </Button>\r\n              <Button className=\"mr-2\" onClick={() => loadPlaylist(true)} variant=\"danger\">\r\n                No\r\n              </Button>\r\n              <Button onClick={() => setConfirmationDisplayed(false)} variant=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </Alert>\r\n        </div>\r\n      }\r\n      <tr key={playlist.uri}>\r\n        <td>{MusicIcon}</td>\r\n        <td><a href={playlist.uri}>{playlist.name}</a></td>\r\n        <td><a href={playlist.owner.uri}>{playlist.owner.display_name}</a></td>\r\n        <td>{playlist.tracks.total}</td>\r\n        <td>{renderTickCross(playlist.public)}</td>\r\n        <td className=\"text-right\">\r\n          <Button type=\"submit\" variant=\"primary\" onClick={selectPlaylist} className=\"text-nowrap btn-xs\">\r\n            <FontAwesomeIcon icon={['fas', 'play-circle']} size=\"sm\" /> Select\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaylistRow\r\n","const Paginator = (props: any) => {\r\n\r\n  const nextClick = (e: any) => {\r\n    e.preventDefault()\r\n    props.onPageChanged(props.currentPage + 1);\r\n  }\r\n\r\n  const prevClick = (e: any) => {\r\n    e.preventDefault()\r\n    props.onPageChanged(props.currentPage - 1);\r\n  }\r\n\r\n  const totalPages = () => {\r\n    return Math.ceil(props.totalRecords / props.pageLimit);\r\n  }\r\n\r\n  return (\r\n    <nav className=\"paginator text-right\">\r\n      <ul className=\"pagination pagination-sm\">\r\n        <li className={props.currentPage <= 1 ? 'page-item disabled' : 'page-item'}>\r\n          { /* eslint-disable-next-line  */}\r\n          <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={prevClick}>\r\n            <span aria-hidden=\"true\">&laquo;</span>\r\n          </a>\r\n        </li>\r\n        <li className={props.currentPage >= totalPages() ? 'page-item disabled' : 'page-item'}>\r\n          { /* eslint-disable-next-line  */}\r\n          <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={nextClick}>\r\n            <span aria-hidden=\"true\">&raquo;</span>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Paginator\r\n","import './PlaylistTable.scss'\r\n\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { FormControl, Form, InputGroup } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\nimport PlaylistsData from \"./data/PlaylistsData\"\r\nimport PlaylistRow from \"./PlaylistRow\"\r\nimport Paginator from \"./Paginator\"\r\nimport { BlindTestContext } from 'App'\r\n\r\nconst PlaylistTable = () => {\r\n  const PAGE_SIZE = 20;\r\n  const playlistsData = new PlaylistsData(); // TODO put cache in state\r\n\r\n  const { setSubtitle } = useContext(BlindTestContext);\r\n  \r\n  const [searchSubmitted, setSearchSubmitted] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [playlists, setPlaylists] = useState<any[]>([]);\r\n  const [playlistCount, setPlaylistCount] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const min = ((currentPage - 1) * PAGE_SIZE) + 1;\r\n    const max = Math.min(min + PAGE_SIZE - 1, playlistCount);\r\n    setSubtitle(`${min}-${max} of ${playlistCount} playlists`);\r\n  }, [setSubtitle, currentPage, playlistCount]);\r\n\r\n  useEffect(() => {\r\n    loadCurrentPlaylistPage();\r\n  }, [currentPage]);\r\n\r\n  const playlistSearch = async () => {\r\n    if (query.length === 0) {\r\n      playlistSearchCancel()\r\n    } else {\r\n      setSearchSubmitted(true);\r\n      const playlists = await playlistsData.search(query)\r\n      setPlaylists(playlists);\r\n      setPlaylistCount(playlists.length);\r\n      setCurrentPage(1);\r\n\r\n      if (playlists.length === playlistsData.SEARCH_LIMIT) {\r\n        setSubtitle(`First ${playlists.length} results with \"${query}\" in playlist name`)\r\n      } else {\r\n        setSubtitle(`${playlists.length} results with \"${query}\" in playlist name`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const playlistSearchCancel = () => {\r\n    setSearchSubmitted(false);\r\n    return loadCurrentPlaylistPage();\r\n  }\r\n\r\n  const loadCurrentPlaylistPage = async () => {\r\n    setQuery('');\r\n\r\n    const playlists = await playlistsData.slice(\r\n      ((currentPage - 1) * PAGE_SIZE),\r\n      ((currentPage - 1) * PAGE_SIZE) + PAGE_SIZE\r\n    )\r\n\r\n    setInitialized(true);\r\n    setPlaylists(playlists);\r\n\r\n    const count = await playlistsData.total();\r\n    setPlaylistCount(count);\r\n  }\r\n\r\n  const handlePageChanged = (page: number) => {\r\n    setCurrentPage(page);\r\n  }\r\n\r\n  const handleSearchKeyDown = (event: any) => {\r\n    event.stopPropagation()\r\n    if (event.key === 'Enter') {\r\n      playlistSearch()\r\n      event.preventDefault()\r\n    } else if (event.key === 'Escape') {\r\n      playlistSearchCancel()\r\n    }\r\n  }\r\n\r\n  if (initialized) {\r\n    const icon = (searchSubmitted)\r\n      ? <FontAwesomeIcon icon={['fas', 'times']} size=\"sm\" onClick={playlistSearchCancel} className=\"closeIcon\" />\r\n      : <FontAwesomeIcon icon={['fas', 'search']} size=\"sm\" onClick={playlistSearch} className=\"searchIcon\" />\r\n    const className = query.length > 0 ? \"search queryPresent\" : \"search\"\r\n\r\n    return (\r\n      <div id=\"playlists\">\r\n        <div id=\"playlistsHeader\">\r\n          <Paginator currentPage={currentPage} pageLimit={PAGE_SIZE} totalRecords={playlistCount} onPageChanged={handlePageChanged} />\r\n          <Form className={className}>\r\n            <InputGroup>\r\n              <FormControl value={query} type=\"text\" role=\"searchbox\" placeholder=\"Search\" size=\"sm\" onChange={(e) => setQuery(e.target.value)} onKeyDown={handleSearchKeyDown} className=\"border-right-0 border\"/>\r\n              <InputGroup.Text className=\"bg-transparent\">\r\n                {icon}\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n          </Form>\r\n        </div>\r\n        <table className=\"table table-hover table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: \"30px\" }}></th>\r\n              <th>Name</th>\r\n              <th style={{ width: \"150px\" }}>Owner</th>\r\n              <th style={{ width: \"100px\" }}>Tracks</th>\r\n              <th style={{ width: \"120px\" }}>Public?</th>\r\n              <th style={{ width: \"100px\" }}> </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {playlists.map((playlist) => {\r\n              return <PlaylistRow\r\n                playlist={playlist}\r\n                key={playlist.id}\r\n              />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div id=\"playlistsFooter\">\r\n          <Paginator currentPage={currentPage} pageLimit={PAGE_SIZE} totalRecords={playlistCount} onPageChanged={handlePageChanged} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div className=\"spinner\"></div>\r\n  }\r\n}\r\n\r\nexport default PlaylistTable\r\n","import { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { removeBlindTestTracks } from \"helpers\"\r\nimport { useContext } from \"react\";\r\nimport { BlindTestContext } from \"App\";\r\n\r\nconst PlaylistsButton = () => {\r\n\r\n  const { setOngoingBt } = useContext(BlindTestContext);\r\n\r\n  const handleClick = () => {\r\n    removeBlindTestTracks();\r\n    setOngoingBt(false);\r\n  }\r\n\r\n  return (\r\n    <Button id=\"listButton\" className=\"topButtons\" type=\"submit\" variant=\"link\" size=\"lg\" onClick={handleClick} title=\"Playlists\">\r\n      <FontAwesomeIcon icon={['fas', 'list']} size=\"lg\" />\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default PlaylistsButton\r\n","import { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { removeRefreshToken, removeAccessToken, removeBlindTestTracks, removeBlindTestScores, removeSettings } from \"helpers\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport { BlindTestContext } from \"App\";\r\n\r\nconst LogoutButton = () => {\r\n\r\n  const { setLoggedIn, setOngoingBt, setConfigured } = useContext(BlindTestContext);\r\n  const navigate = useNavigate()\r\n\r\n  const handleClick = () => {\r\n    removeRefreshToken();\r\n    removeAccessToken();\r\n    removeBlindTestTracks();\r\n    removeBlindTestScores();\r\n    removeSettings();\r\n    setLoggedIn(false);\r\n    setOngoingBt(false);\r\n    setConfigured(false);\r\n    navigate(\"/\");\r\n  }\r\n\r\n  return (\r\n    <Button id=\"logoutButton\" className=\"topButtons\" type=\"submit\" variant=\"link\" size=\"lg\" onClick={handleClick} title=\"Logout\">\r\n      <FontAwesomeIcon icon={['fas', 'sign-out-alt']} size=\"lg\" />\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default LogoutButton\r\n","import { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst LogoutButton = () => {\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const handleClick = () => {\r\n    navigate('/settings');\r\n  }\r\n\r\n  return (\r\n    <Button id=\"settingButton\" className=\"topButtons\" type=\"submit\" variant=\"link\" size=\"lg\" onClick={handleClick} title=\"Settings\">\r\n      <FontAwesomeIcon icon={['fas', 'cog']} size=\"lg\" />\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default LogoutButton\r\n","import { getBlindTestTracks, getBlindTestScores, computeDistance, cleanValueLight, getSettings, setBlindTestTracks, setBlindTestScores, getTwitchOAuthToken } from \"helpers\"\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { launchTrack, pausePlayer, resumePlayer, setRepeatMode } from \"../services/SpotifyAPI\"\r\nimport { Button, FormControl } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Guessable } from \"./data/BlindTestData\"\r\nimport { Client, Options } from \"tmi.js\"\r\nimport { BlindTestContext } from \"App\"\r\n\r\ntype DisplayableScoreType = {\r\n  nick: string,\r\n  rank?: number,\r\n  score: number\r\n}\r\n\r\ntype GuessType = {\r\n  guessed: boolean,\r\n  guessedBy?: string,\r\n  points?: number\r\n}\r\n\r\nlet twitchClient: Client | null = null;\r\nlet twitchCallback: (nick: string, msg: string) => void = () => { };\r\n\r\nconst twitchConnection = (chan: string, chatNotifications: boolean) => {\r\n  let opts: Options = { channels: [chan] };\r\n  if (chatNotifications) {\r\n    opts.identity = {\r\n      username: 'foo',\r\n      password: getTwitchOAuthToken() || \"\"\r\n    }\r\n  }\r\n  twitchClient = new Client(opts);\r\n  twitchClient.connect();\r\n  twitchClient.on('message', (_channel: any, _tags: any, _message: any) => twitchCallback(_tags['display-name'], _message));\r\n}\r\n\r\nconst twitchDisconnection = () => {\r\n  if (twitchClient !== null) {\r\n    twitchClient.disconnect();\r\n  }\r\n}\r\n\r\nconst BlindTestView = () => {\r\n\r\n  const { setSubtitle } = useContext(BlindTestContext);\r\n\r\n  const [bt] = useState(() => getBlindTestTracks());\r\n  const [settings] = useState(() => getSettings());\r\n  const [doneTracks, setDoneTracks] = useState(bt.doneTracks);\r\n  const [scores, setScores] = useState(() => getBlindTestScores());\r\n  const [nickFilter, setNickFilter] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [playing, setPlaying] = useState(false);\r\n  const [paused, setPaused] = useState(false);\r\n  const [guesses, setGuesses] = useState<GuessType[]>([]);\r\n  const [guessables, setGuessables] = useState<Guessable[]>([]);\r\n  const [coverUri, setCoverUri] = useState('');\r\n\r\n  useEffect(() => {\r\n    twitchConnection(settings.twitchChannel, settings.chatNotifications);\r\n    return () => {\r\n      twitchDisconnection();\r\n    }\r\n  }, [settings.twitchChannel]);\r\n\r\n  useEffect(() => {\r\n    if (playing) {\r\n      setSubtitle(`Playing song #${doneTracks} out of ${bt.tracks.length}`)\r\n    } else if (bt.tracks.length - doneTracks > 0) {\r\n      setSubtitle(`${bt.tracks.length - doneTracks} tracks left`);\r\n    } else {\r\n      setSubtitle('Blind-test is finished !');\r\n    }\r\n  }, [setSubtitle, bt.tracks.length, playing, doneTracks]);\r\n\r\n  const backupState = () => {\r\n    bt.doneTracks = doneTracks;\r\n    setBlindTestTracks(bt);\r\n    setBlindTestScores(scores);\r\n  }\r\n\r\n  const onProposition = (nick: string, message: string) => {\r\n    addPlayerIfUnknown(nick);\r\n    if (playing) {\r\n      const proposition = cleanValueLight(message)\r\n      for (let i = 0; i < guessables.length; i++) {\r\n        const guess = guesses[i]\r\n        if (guess.guessed) continue\r\n        const guessable = guessables[i]\r\n        const d = computeDistance(proposition, guessable.toGuess)\r\n        if (d <= guessable.maxDistance || (proposition.includes(guessable.toGuess) && proposition.length <= 1.6 * guessable.toGuess.length)) {\r\n          const points = 1 + (guesses.find((g) => g.guessed && g.guessedBy === nick) ? 1 : 0);\r\n          addPointToPlayer(nick, points);\r\n          updateGuessState(i, nick, points);\r\n          twitchClient?.say(settings.twitchChannel, `✅ ${nick} correctly guessed [${guessable.toGuess}] +${points}`)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  twitchCallback = onProposition;\r\n\r\n  const addPlayerIfUnknown = (nick: string) => {\r\n    if (settings.addEveryUser && !scores.get(nick)) {\r\n      addPointToPlayer(nick, 0)\r\n    }\r\n  }\r\n\r\n  const addPointToPlayer = (nick: string, points: number) => {\r\n    let newScores: Map<string, number> = new Map(scores)\r\n    newScores.set(nick, (newScores.get(nick) || 0) + points)\r\n    setScores(newScores);\r\n  }\r\n\r\n  const updateGuessState = (index: number, nick: string, points: number) => {\r\n    let newGuesses = new Array<GuessType>()\r\n    guesses.forEach((oldGuess: GuessType, i: number) => {\r\n      if (i === index) {\r\n        newGuesses.push({ guessed: true, guessedBy: nick, points: points })\r\n      } else {\r\n        newGuesses.push({ guessed: oldGuess.guessed, guessedBy: oldGuess.guessedBy, points: oldGuess.points })\r\n      }\r\n    })\r\n    setGuesses(newGuesses);\r\n  }\r\n\r\n  const allGuessed = () => {\r\n    return playing && guesses.reduce((prev, curr) => prev && curr.guessed, true)\r\n  }\r\n\r\n  const handleReveal = () => {\r\n    backupState()\r\n    let newGuesses = new Array<GuessType>()\r\n    guesses.forEach((oldGuess: GuessType) => { newGuesses.push({ guessed: true, guessedBy: oldGuess.guessedBy, points: oldGuess.points }) })\r\n    setGuesses(newGuesses);\r\n  }\r\n\r\n  const handlePause = () => {\r\n    pausePlayer(settings.deviceId);\r\n    setPaused(true);\r\n  }\r\n\r\n  const handleResume = () => {\r\n    resumePlayer(settings.deviceId);\r\n    setPaused(false);\r\n  }\r\n\r\n  const handleNextSong = async () => {\r\n    backupState()\r\n    let track = bt.tracks[doneTracks]\r\n    setPlaying(false);\r\n    setLoading(true);\r\n    launchTrack(track.uri, track.offset, settings.deviceId).then(() => {\r\n      setRepeatMode(true, settings.deviceId);\r\n      setDoneTracks(doneTracks + 1);\r\n      setGuessables([track.title, ...track.artists]);\r\n      setGuesses(new Array(track.artists.length + 1).fill({ guessed: false }));\r\n      setCoverUri(track.img);\r\n      setPlaying(true);\r\n      setPaused(false);\r\n      setLoading(false);\r\n    }).catch(() => {\r\n      setLoading(false);\r\n    });\r\n  }\r\n\r\n  const CrossEmoji = <FontAwesomeIcon color=\"#de281b\" icon={['fas', 'times']} size=\"lg\" />;\r\n  const BubbleEmoji = <FontAwesomeIcon icon={['far', 'comment']} size=\"lg\" />;\r\n  const CheckEmoji = <FontAwesomeIcon color=\"#18ad1d\" icon={['fas', 'check']} size=\"lg\" />;\r\n\r\n  const GuessableView = (props: any) => {\r\n    const guessable: Guessable = props.guessable\r\n    const guess: GuessType = props.guess\r\n    if (guess.guessed) {\r\n      return <div className=\"pb-3\">\r\n        <div className=\"bt-orig\">{guess.guessedBy ? CheckEmoji : CrossEmoji} {guessable.original}</div>\r\n        <div className=\"bt-tg\">[<i>{guessable.toGuess}</i>]</div>\r\n        {guess.guessedBy && <div className=\"bt-gb\">{BubbleEmoji} {guess.guessedBy} <b>[+{guess.points}]</b></div>}\r\n      </div>\r\n    } else {\r\n      return <div className=\"pb-3\">\r\n        {CrossEmoji}<div className=\"bt-orig\" style={{ fontWeight: 'bold' }}>&nbsp;?</div>\r\n      </div>\r\n    }\r\n  }\r\n\r\n  const computeFlatScores = () => {\r\n    let flat: DisplayableScoreType[] = []\r\n    let distinctScores: number[] = [];\r\n    scores.forEach((_val: number, _key: string) => {\r\n      flat.push({\r\n        nick: _key,\r\n        score: _val\r\n      })\r\n      if (!distinctScores.includes(_val)) {\r\n        distinctScores.push(_val);\r\n      }\r\n    })\r\n    distinctScores.sort((a, b) => b - a);\r\n    flat.sort((a, b) => a.nick.localeCompare(b.nick))\r\n    flat.sort((a, b) => b.score - a.score)\r\n    if (nickFilter) {\r\n      flat = flat.filter(s => s.nick.toLowerCase().includes(nickFilter));\r\n    }\r\n    // Display rank only for the first of each group\r\n    for (let i = 0; i < flat.length; i++) {\r\n      if (i === 0 || flat[i].score !== flat[i - 1].score) {\r\n        flat[i].rank = 1 + distinctScores.indexOf(flat[i].score);\r\n      }\r\n    }\r\n    return flat;\r\n  }\r\n\r\n  return (\r\n    <div id=\"blindtest\">\r\n      <div className=\"row align-items-md-stretch mb-4\">\r\n        <div className=\"col-md-6\">\r\n          <div id=\"title\" className=\"p-3 mb-2 bg-light border rounded-3\" >\r\n            <div id=\"cover\">\r\n              {allGuessed() &&\r\n                <img id=\"cover-image\" src={coverUri} alt=\"album cover\" />\r\n              }\r\n              {(playing || loading) && !allGuessed() &&\r\n                <FontAwesomeIcon icon={['fas', 'question']} size=\"sm\" />\r\n              }\r\n              {!playing && !loading &&\r\n                <FontAwesomeIcon icon={['fas', 'volume-mute']} size=\"sm\" />\r\n              }\r\n            </div>\r\n          </div>\r\n          <div id=\"title\" className=\"p-3 mb-2 bg-light border rounded-3\" >\r\n            <div className=\"bt-h\">\r\n              <h2>TITLE</h2>\r\n            </div>\r\n            {playing &&\r\n              <div>\r\n                <GuessableView key=\"guess_0\" guessable={guessables[0]} guess={guesses[0]} />\r\n              </div>\r\n            }\r\n          </div>\r\n          <div id=\"artists\" className=\"p-3 mb-2 bg-light border rounded-3\" >\r\n            <div className=\"bt-h\">\r\n              <h2>ARTIST(S)</h2>\r\n            </div>\r\n            {playing &&\r\n              <div>\r\n                {guessables.slice(1).map((guessable: Guessable, index: number) => {\r\n                  return <GuessableView key={\"guess_\" + (index + 1)} guessable={guessable} guess={guesses[index + 1]} />\r\n                })}\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div id=\"player\" className=\"mb-2\" style={{ display: 'flex' }}>\r\n            <Button style={{ width: '30%' }} id=\"nextButton\" disabled={loading || doneTracks >= bt.tracks.length} type=\"submit\" variant=\"outline-secondary\" size=\"sm\" onClick={handleNextSong} title=\"Next\">\r\n              <FontAwesomeIcon icon={['fas', 'step-forward']} color=\"#84BD00\" size=\"sm\" /> NEXT\r\n            </Button>\r\n            &nbsp;\r\n            {\r\n              paused &&\r\n              <Button style={{ width: '30%' }} id=\"resumeButton\" disabled={!playing} type=\"submit\" variant=\"outline-secondary\" size=\"sm\" onClick={handleResume} title=\"Resume\">\r\n                <FontAwesomeIcon icon={['fas', 'play']} color=\"#84BD00\" size=\"sm\" /> RESUME\r\n              </Button>\r\n            }\r\n            {\r\n              !paused &&\r\n              <Button style={{ width: '30%' }} id=\"pauseButton\" disabled={!playing} type=\"submit\" variant=\"outline-secondary\" size=\"sm\" onClick={handlePause} title=\"Pause\">\r\n                <FontAwesomeIcon icon={['fas', 'pause']} color=\"#84BD00\" size=\"sm\" /> PAUSE\r\n              </Button>\r\n            }\r\n            &nbsp;\r\n            <Button style={{ width: '30%' }} id=\"revealButton\" disabled={!playing || allGuessed()} type=\"submit\" variant=\"outline-secondary\" size=\"sm\" onClick={handleReveal} title=\"Reveal\">\r\n              <FontAwesomeIcon icon={['fas', 'eye']} color=\"#84BD00\" size=\"sm\" /> REVEAL\r\n            </Button>\r\n            &nbsp;\r\n            <FormControl value={nickFilter} type=\"text\" role=\"searchbox\" placeholder=\"Nick filter\" size=\"sm\" onChange={(e) => setNickFilter(e.target.value.toLowerCase())} className=\"border\" />\r\n          </div>\r\n          <div id=\"leaderboard\" className=\"p-3 bg-light border rounded-3\">\r\n            <table className=\"table-hover bt-t\">\r\n              <thead>\r\n                <tr>\r\n                  <th style={{ width: \"60px\" }}>Rank</th>\r\n                  <th style={{ width: \"270px\" }}>Nick</th>\r\n                  <th style={{ width: \"60px\" }}>Score</th>\r\n                  <th style={{ width: \"100px\" }}></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {computeFlatScores().map((sc, index) => {\r\n                  return <tr key={\"score_\" + index}>\r\n                    <td>{sc.rank}</td>\r\n                    <td>{sc.nick}</td>\r\n                    <td>{sc.score}</td>\r\n                    <td className=\"text-right\">\r\n                      <Button type=\"submit\" variant=\"primary\" size=\"sm\" onClick={() => addPointToPlayer(sc.nick, -1)} className=\"text-nowrap\">\r\n                        <FontAwesomeIcon icon={['fas', 'minus']} size=\"sm\" />\r\n                      </Button>\r\n                      &nbsp;\r\n                      <Button type=\"submit\" variant=\"primary\" size=\"sm\" onClick={() => addPointToPlayer(sc.nick, 1)} className=\"text-nowrap\">\r\n                        <FontAwesomeIcon icon={['fas', 'plus']} size=\"sm\" />\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlindTestView\r\n","import { setAccessToken, setRefreshToken, getQueryParam } from \"helpers\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { retrieveAccessToken } from 'services/axios'\r\nimport { useContext, useEffect } from 'react'\r\nimport instance from \"../services/axios\";\r\nimport { BlindTestContext } from \"App\";\r\n\r\nconst LoginCallback = () => {\r\n\r\n  const { setLoggedIn } = useContext(BlindTestContext);\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const code = getQueryParam('code')\r\n    if (code) {\r\n      retrieveAccessToken(code).then(response => {\r\n        setRefreshToken(response.data.refresh_token);\r\n        const accessToken = response.data.access_token;\r\n        setAccessToken(accessToken);\r\n        instance.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\r\n        setLoggedIn(true);\r\n        navigate(\"/\");\r\n      })\r\n    } else {\r\n      navigate(\"/\")\r\n    }\r\n  }, [navigate, setLoggedIn]);\r\n\r\n  return (\r\n    <div className=\"spinner\"></div>\r\n  )\r\n}\r\n\r\nexport default LoginCallback\r\n","import './App.scss';\r\nimport './icons';\r\nimport { useEffect, useState, createContext } from 'react';\r\nimport { Routes, Route, useNavigate } from 'react-router-dom';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { setAxiosErrorCallback } from './services/axios';\r\nimport { getRefreshToken, getSettings, hasStoredBlindTest } from './helpers';\r\nimport Login from './components/Login';\r\nimport Settings from './components/Settings';\r\nimport PlaylistTable from './components/PlaylistTable';\r\nimport PlaylistsButton from './components/PlaylistsButton';\r\nimport LogoutButton from './components/LogoutButton';\r\nimport SettingsButton from 'components/SettingsButton';\r\nimport BlindTestView from './components/BlindTestView';\r\nimport LoginCallback from './components/LoginCallback';\r\n\r\nfunction App() {\r\n  const navigate = useNavigate();\r\n\r\n  const [loggedIn, setLoggedIn] = useState(() => getRefreshToken() !== null);\r\n  const [configured, setConfigured] = useState(() => getSettings().isInitialized());\r\n  const [ongoingBt, setOngoingBt] = useState(() => hasStoredBlindTest());\r\n  const [view, setView] = useState(<div />);\r\n  const [subtitle, setSubtitle] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const contextValue = { loggedIn, setLoggedIn, configured, setConfigured, ongoingBt, setOngoingBt, subtitle, setSubtitle };\r\n\r\n  useEffect(() => {\r\n    setAxiosErrorCallback((msg: string) => { setErrorMessage(msg); });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!loggedIn) {\r\n      setView(<Login />);\r\n    } else if (!configured) {\r\n      navigate('/settings');\r\n    } else if (!ongoingBt) {\r\n      setView(<PlaylistTable />);\r\n    } else {\r\n      setView(<BlindTestView />);\r\n    }\r\n  }, [navigate, loggedIn, configured, ongoingBt]);\r\n\r\n  const onPopupClose = () => {\r\n    setErrorMessage('');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <BlindTestContext.Provider value={contextValue}>\r\n      <div className=\"App container\">\r\n        {errorMessage &&\r\n          <div className=\"spot-modal-bg\">\r\n            <Alert className=\"spot-modal\" variant=\"danger\" >\r\n              <Alert.Heading>Error</Alert.Heading>\r\n              <p>\r\n                Spotify server returned : {errorMessage}\r\n              </p>\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Button onClick={onPopupClose} variant=\"outline-danger\">\r\n                  Close\r\n                </Button>\r\n              </div>\r\n            </Alert>\r\n          </div>\r\n        }\r\n        <header className=\"App-header\">\r\n          <div style={{ position: 'absolute', right: 0 }}>\r\n            {ongoingBt && <PlaylistsButton />}\r\n            {loggedIn && <SettingsButton />}\r\n            {loggedIn && <LogoutButton />}\r\n          </div>\r\n          <h1>\r\n            <FontAwesomeIcon icon={['fab', 'spotify']} color=\"#84BD00\" size=\"sm\" /> <a href={process.env.PUBLIC_URL}>BlindTesTwitch</a>\r\n          </h1>\r\n\r\n          <p id=\"subtitle\" className=\"lead text-secondary\">\r\n            {subtitle}\r\n          </p>\r\n        </header>\r\n        <Routes>\r\n          <Route path=\"/\" element={view} />\r\n          <Route path=\"/callback\" element={<LoginCallback />} />\r\n          <Route path=\"/settings\" element={<Settings />} />\r\n        </Routes>\r\n      </div>\r\n    </BlindTestContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nexport const BlindTestContext = createContext({\r\n  loggedIn: false,\r\n  setLoggedIn: (v: boolean) => { }, // eslint-disable-line\r\n  configured: false,\r\n  setConfigured: (v: boolean) => { }, // eslint-disable-line\r\n  ongoingBt: false,\r\n  setOngoingBt: (v: boolean) => { }, // eslint-disable-line\r\n  subtitle: '',\r\n  setSubtitle: (v: string) => { } // eslint-disable-line\r\n});\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.scss\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// https://caniuse.com/mdn-javascript_builtins_array_flatmap\r\nrequire('array.prototype.flatmap').shim()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}